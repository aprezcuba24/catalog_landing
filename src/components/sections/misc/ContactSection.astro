---
// Import the necessary dependencies.
import AuthBtn from "@components/ui/buttons/AuthBtn.astro";
import ContactIconBlock from "@components/ui/blocks/ContactIconBlock.astro";
import TextInput from "@components/ui/forms/input/TextInput.astro";
import EmailContactInput from "@components/ui/forms/input/EmailContactInput.astro";
import PhoneInput from "@components/ui/forms/input/PhoneInput.astro";
import TextAreaInput from "@components/ui/forms/input/TextAreaInput.astro";
import Icon from "@components/ui/icons/Icon.astro";

// Define the variables that will be used in this component
const title: string = "Contáctenos";
const subTitle: string =
  "¿Tiene alguna pregunta o quiere montar su tienda EnElGaraje? \n Póngase en contacto con nosotros y creemos la solución perfecta con nuestras herramientas y servicios.";
const formTitle: string = "Envíenos su mensaje";
const formSubTitle: string = "Le responderemos dentro de 1 a 2 días hábiles, tan pronto podamos. Manténgase al tanto de su buzón de correo electrónico";
---

<!-- Notificación -->
<div id="notification" class="hidden fixed top-4 left-1/2 transform -translate-x-1/2 p-4 rounded-lg shadow-lg bg-green-500 text-white z-50">
  <span id="notification-message"></span>
</div>

<!-- Contact Us -->
<section class="mx-auto max-w-[85rem] px-4 py-10 sm:px-6 lg:px-8 lg:py-14">
  <div class="mx-auto max-w-2xl lg:max-w-5xl">
    <div class="text-center">
      <h1
        class="text-balance text-2xl font-bold tracking-tight text-neutral-800 dark:text-neutral-200 md:text-4xl md:leading-tight"
      >
        {title}
      </h1>
      <p class="mt-1 text-pretty text-neutral-600 dark:text-neutral-400">
        {subTitle}
      </p>
    </div>

    <div class="mt-12 grid items-center gap-6 lg:gap-16">
      <div class="flex flex-col rounded-xl p-4 sm:p-6 lg:p-8">
        <h2
          class="mb-8 text-xl font-bold text-neutral-700 dark:text-neutral-300"
        >
          {formTitle}
        </h2>
        <!-- Form for user input with various input fields.
        Each field utilizes a different input component for the specific type of input (text, email, phone, and textarea) -->
        <form id="contact-form">
          <div class="grid gap-4">
            <div class="grid grid-cols-1 gap-4 sm:grid-cols-2">
              <TextInput
                id="hs-firstname-contacts"
                label="Nombre completo"
                name="nombre"
              />
              <TextInput
                id="hs-lastname-contacts"
                label="Apellido"
                name="apellido"
              />
            </div>
            <EmailContactInput id="hs-email-contacts" name="email" /> <!-- Agregado name -->
            <PhoneInput id="hs-phone-number" name="telefono" /> <!-- Agregado name -->
            <TextAreaInput
              id="hs-about-contacts"
              label="Detalles"
              name="detalles"
            />
          </div>

          <div class="mt-4 grid">
            <AuthBtn title="Enviar mensaje" type="submit" />
          </div>

          <div class="mt-3 text-center">
            <p class="text-sm text-neutral-600 dark:text-neutral-400">
              {formSubTitle}
            </p>
          </div>
        </form>
      </div>
    </div>
  </div>
</section>

<!-- Script para manejar el envío del formulario -->
<script>
  const form = document.getElementById('contact-form');
  const notification = document.getElementById('notification');
  const notificationMessage = document.getElementById('notification-message');

  if (form && notification && notificationMessage) {
    form.addEventListener('submit', async (event) => {
      event.preventDefault(); // Evita el envío tradicional del formulario

      // Afirmar que event.target es un HTMLFormElement
      const formElement = event.target as HTMLFormElement;

      // Validar campos obligatorios
      const nombre = formElement.nombre.value.trim();
      const apellido = formElement.apellido.value.trim();
      const email = formElement.email.value.trim();
      const telefono = formElement.telefono.value.trim();
      const detalles = formElement.detalles.value.trim();

      if (!nombre || !apellido || !email || !telefono || !detalles) {
        // Muestra una notificación de error si algún campo está vacío
        notification.classList.remove('hidden');
        notification.classList.remove('bg-green-500');
        notification.classList.add('bg-red-500');
        notificationMessage.textContent = 'Todos los campos son obligatorios.';

        // Oculta la notificación después de 5 segundos
        setTimeout(() => {
          notification.classList.add('hidden');
        }, 5000);
        return; // Detiene el envío del formulario
      }

      const formData = new FormData(formElement); // Usar formElement en lugar de event.target
      const data = Object.fromEntries(formData.entries());

      try {
        const response = await fetch('http://localhost:3001/enviar-formulario', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify(data),
        });

        const result = await response.json();

        // Muestra la notificación
        if (result.success) {
          notification.classList.remove('hidden');
          notification.classList.remove('bg-red-500');
          notification.classList.add('bg-green-500');
          notificationMessage.textContent = result.message;

          // Limpia los campos del formulario
          formElement.reset();
        } else {
          notification.classList.remove('hidden');
          notification.classList.remove('bg-green-500');
          notification.classList.add('bg-red-500');
          notificationMessage.textContent = result.message;
        }

        // Oculta la notificación después de 5 segundos
        setTimeout(() => {
          notification.classList.add('hidden');
        }, 5000);
      } catch (error) {
        console.error('Error:', error);

        // Muestra una notificación de error si hay un problema con la solicitud
        notification.classList.remove('hidden');
        notification.classList.remove('bg-green-500');
        notification.classList.add('bg-red-500');
        notificationMessage.textContent = 'Error al enviar el formulario. Inténtalo de nuevo.';

        // Oculta la notificación después de 5 segundos
        setTimeout(() => {
          notification.classList.add('hidden');
        }, 5000);
      }
    });
  } else {
    console.error('No se encontraron los elementos del formulario o la notificación.');
  }
</script>